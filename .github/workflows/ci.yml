name: .NET CI + Coverage (local report)

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build-test-coverage:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup .NET 7
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '7.0.x'

      - name: Restore dependencies
        id: restore
        continue-on-error: true
        run: |
          dotnet restore 2>&1 | tee restore.log
          echo "EXIT_CODE_RESTORE=${PIPESTATUS[0]}" >> $GITHUB_ENV

      - name: Build solution
        id: build
        continue-on-error: true
        run: |
          dotnet build --no-restore 2>&1 | tee build.log
          echo "EXIT_CODE_BUILD=${PIPESTATUS[0]}" >> $GITHUB_ENV

      - name: Run tests with coverage and capture logs
        id: test
        run: |
          dotnet test tests/dotnet-ci.Tests.csproj --no-build --collect:"XPlat Code Coverage" 2>&1 | tee test-output.log
          echo "EXIT_CODE=${PIPESTATUS[0]}" >> $GITHUB_ENV

      - name: Marcar como fallido si los tests fallaron
        if: env.EXIT_CODE != '0'
        run: exit 1

      - name: Install ReportGeneratorr
        id: reportgen-install
        continue-on-error: true
        run: |
          dotnet tool install --global dotnet-reportgenerator-globaltool --version 5.1.26 2>&1 | tee reportgen-install.log
        env:
          DOTNET_ROOT: /home/runner/.dotnet
          PATH: /home/runner/.dotnet/tools:/usr/bin:/bin

      - name: Generate coverage report
        id: coverage
        continue-on-error: true
        run: |
          reportgenerator \
            -reports:tests/**/coverage.cobertura.xml \
            -targetdir:coverage-report \
            -reporttypes:Html 2>&1 | tee coverage.log
        env:
          PATH: /home/runner/.dotnet/tools:/usr/bin:/bin

      - name: Docker build
        id: docker-build
        continue-on-error: true
        run: |
          docker build -t dotnet-ci-app . 2>&1 | tee docker-build.log

      - name: Login to Docker Hub
        if: success()
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Docker push
        if: success()
        run: |
          docker tag dotnet-ci-app ${{ secrets.DOCKER_USERNAME }}/dotnet-ci-app
          docker push ${{ secrets.DOCKER_USERNAME }}/dotnet-ci-app

      - name: Enviar embed a Discord si pasa
        if: success()
        run: |
          COMMIT_RAW=$(echo "${{ github.event.head_commit.message }}" | head -c 200 | sed 's/["`]/\\&/g')

          jq -n \
            --arg commit "$COMMIT_RAW" \
            --arg repo "${{ github.repository }}" \
            --arg branch "${{ github.ref_name }}" \
            --arg actor "${{ github.actor }}" \
            --arg run_url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
            --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
            '{
              embeds: [{
                title: "‚úÖ CI exitoso",
                description: "**Repositorio:** [\($repo)](https://github.com/\($repo))\n**Rama:** `\($branch)`\n[üîó Ver run completo](\($run_url))",
                color: 65280,
                fields: [
                  { name: "Commit", value: $commit }
                ],
                footer: { text: "Autor: \($actor)" },
                timestamp: $timestamp
              }]
            }' > payload.json

          curl -X POST -H "Content-Type: application/json" -d @payload.json ${{ secrets.DISCORD_WEBHOOK_SUCCESS }}

      - name: IA explanation para cualquier fallo
        if: failure()
        run: |
          COMMIT_RAW=$(echo "${{ github.event.head_commit.message }}" | head -c 200 | sed 's/["`]/\\&/g')
          FILES=$(ls *.log 2>/dev/null || true)
          for f in $FILES; do
            if grep -iE "error|exception|failed" "$f"; then
              echo "‚ö†Ô∏è Error detectado en $f"
              LOGS=$(tail -n 50 "$f" | head -c 1500 | sed 's/["`]/\\&/g' | tr '\n' ' ')
              STEP_NAME=$(basename "$f" .log | tr 'a-z' 'A-Z')
              PROMPT=$(jq -Rs . <<< "El paso \"$STEP_NAME\" del pipeline de GitHub Actions fall√≥. Este es el log capturado:\n\n$LOGS\n\nExplicalo como una IA mentora para estudiantes, en un solo p√°rrafo, con lenguaje claro, indicando qu√© fall√≥ y c√≥mo se puede solucionar.")

              RESPONSE=$(curl -s https://openrouter.ai/api/v1/chat/completions \
                -H "Authorization: Bearer ${{ secrets.OPENROUTER_API_KEY }}" \
                -H "Content-Type: application/json" \
                -H "HTTP-Referer: https://github.com/${{ github.repository }}" \
                -d "{
                  \"model\": \"deepseek/deepseek-chat\",
                  \"messages\": [
                    { \"role\": \"system\", \"content\": \"Sos una IA que explica errores de CI/CD para estudiantes nuevos.\" },
                    { \"role\": \"user\", \"content\": $PROMPT }
                  ]
                }")

              EXPLICACION=$(echo "$RESPONSE" | jq -r '.choices[0].message.content // "‚ö†Ô∏è DeepSeek no devolvi√≥ contenido v√°lido."')
              SAFE_EXPLICACION=$(echo "$EXPLICACION" | head -c 1000 | jq -Rs .)

              jq -n \
                --arg commit "$COMMIT_RAW" \
                --arg explicacion "$SAFE_EXPLICACION" \
                --arg repo "${{ github.repository }}" \
                --arg branch "${{ github.ref_name }}" \
                --arg actor "${{ github.actor }}" \
                --arg run_url "https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" \
                --arg step "$STEP_NAME" \
                --arg timestamp "$(date -u +%Y-%m-%dT%H:%M:%SZ)" \
                '{
                  embeds: [{
                    title: "‚ùå Fallo en etapa \($step) - explicaci√≥n IA",
                    description: "**Repositorio:** [\($repo)](https://github.com/\($repo))\n**Rama:** `\($branch)`\n[üîç Ver run](\($run_url))",
                    color: 16711680,
                    fields: [
                      { name: "Commit", value: $commit },
                      { name: "Explicaci√≥n de la IA", value: $explicacion }
                    ],
                    footer: { text: "Autor: \($actor)" },
                    timestamp: $timestamp
                  }]
                }' > payload.json

              curl -X POST -H "Content-Type: application/json" -d @payload.json ${{ secrets.DISCORD_WEBHOOK_FAILURE }}
            fi
          done
